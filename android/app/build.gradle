apply plugin: 'com.android.application'

android {
    namespace "co.za.littlelattelane.app"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "co.za.littlelattelane.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 8
        versionName "1.1.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile file('../little-latte-lane.keystore')
            storePassword System.getenv("KEYSTORE_PASSWORD") ?: ''
            keyAlias 'little-latte-lane'
            keyPassword System.getenv("KEY_PASSWORD") ?: ''
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    
    // Capacitor Core
    implementation project(':capacitor-android')
    
    // AndroidX Core Libraries
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    
    // Capacitor Plugins
    implementation project(':capacitor-app')
    implementation project(':capacitor-browser')
    implementation project(':capacitor-push-notifications')
    
    // Testing
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
}

apply from: 'capacitor.build.gradle'

// Firebase (for push notifications)
try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
